<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FWW.Framework.DapperEx</name>
    </assembly>
    <members>
        <member name="P:FWW.Framework.DapperEx.BaseAttribute.Name">
            <summary>
            对应数据字段/表名
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.PrimaryKeyAttribute">
            <summary>
            Class PrimaryKeyAttribute.
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.PrimaryKeyAttribute.AutoIncrement">
            <summary>
            自增长
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.IgnoreAttribute">
            <summary>
            忽略字段
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.IgnoreAttribute.All">
            <summary>
            忽略所有，即不出现在查询，也不出现在更新
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.TableAttribute">
            <summary>
            数据库表
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.ParamColumnMapping">
            <summary>
            生成SQL时参数里面的列名和对应值名称
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.ParamColumnMapping.ColumnName">
            <summary>
            数据库列名
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.ParamColumnMapping.FieldName">
            <summary>
            对应类属性名
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.ParamColumnMapping.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name">实体对应名</param>
            <param name="colName">字段对应名</param>
        </member>
        <member name="T:FWW.Framework.DapperEx.EntityCacheInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.IdentityField">
            <summary>
            自动增长字段
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.Fields">
            <summary>
            字段
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheInfo.GetFirstField">
            <summary>
            返回第一个字段
            </summary>
            <returns></returns>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.PrimiaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.ParimaryKeyWhere">
            <summary>
            主键作为条件
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.InsertDeserializer">
            <summary>
            新增
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.GetUpdateByPrimaryKeysFunc">
            <summary>
            更新
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.SetUpdateInfo">
            <summary>
            设置更新字段
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.SetCreateInfo">
            <summary>
            设置创建信息字段
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.GetUpdateByWhereFunc">
            <summary>
            更新
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.EntityCacheInfo.SimpleWhereDeserializer">
            <summary>
            简单条件语句，全部是等于
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheInfo.GetUpdateFieldsSql(System.Object)">
            <summary>
            获取要更新的字段
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheInfo.GetUpdateByPrimaryKey(System.Object,System.String)">
            <summary>
            根据主键更新
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheInfo.GetUpdateByWhere(System.Object,System.String,FWW.Framework.DapperEx.SqlDataParameter,System.String)">
            <summary>
            Gets the update by where.
            </summary>
            <param name="obj">The object.</param>
            <param name="where">The where.</param>
            <param name="sqldataparameters"></param>
            <param name="extendup">The extendup.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheInfo.GetUpdateByWhere(System.Object,System.String,System.String)">
            <summary>
            Gets the update by where.
            </summary>
            <param name="obj">The object.</param>
            <param name="where">The where.</param>
            <param name="extendup">The extendup.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheInfo.GetInsertSql(System.Object)">
            <summary>
            Gets the insert SQL.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheInfo.GeneratorSimpleSelectSql(System.Object,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Generators the simple select SQL.
            </summary>
            <param name="model">The model.</param>
            <param name="displayfields">The displayfields.</param>
            <param name="withnolock">if set to <c>true</c> [withnolock].</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.DataUtils">
            <summary>
            帮助类
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.FormatSQL(System.String,System.Char,System.Char)">
            <summary>
            格式化sql
            </summary>
            <param name="sql"></param>
            <param name="leftToken"></param>
            <param name="rightToken"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.FormatValue(System.Object)">
            <summary>
            格式化数据为数据库通用格式
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.CheckStruct(System.Type)">
            <summary>
            CheckStuct
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.Clone(System.Object)">
            <summary>
            DeepClone
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.ConvertValue(System.Type,System.Object)">
            <summary>
            转换
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.ConvertValue``1(System.Object)">
            <summary>
            转换数据类型
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.FastMethodInvoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            快速执行Method
            </summary>
            <param name="obj"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.Create``1">
            <summary>
            快速实例化一个T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.Create(System.Type)">
            <summary>
            快速实例化一个FastCreateInstanceHandler
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.SetPropertyValue(System.Type,System.Object,System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="type"></param>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.GetPropertyValue``1(``0,System.String)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="F:FWW.Framework.DapperEx.DataUtils.keyReg">
            <summary>
            DataTable转化为 List
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.GetNewParamCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.MakeUniqueKey(FWW.Framework.DapperEx.Field)">
            <summary>
            生成唯一字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.FieldValueToDictionary(FWW.Framework.DapperEx.Field[],System.Object[])">
            <summary>
            数组转成字典
            </summary>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.ToString(FWW.Framework.DapperEx.QueryOperator)">
            <summary>
            
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataUtils.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader)">
            <summary>
            Throws a data exception, only used internally
            </summary>
            <param name="ex"></param>
            <param name="index"></param>
            <param name="reader"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DosORMCommonExpand.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取自定义特性，带有缓存功能，避免因.Net内部GetCustomAttributes没有缓存而带来的损耗
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="member"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DosORMCommonExpand.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>获取自定义属性</summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="member"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.FastInvokeHandler">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.FastCreateInstanceHandler">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.FastPropertyGetHandler">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.FastPropertySetHandler">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="T:FWW.Framework.DapperEx.DynamicCalls">
            <summary>
            
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DynamicCalls.dictInvoker">
            <summary>
            用于存放GetMethodInvoker的Dictionary
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DynamicCalls.dictCreator">
            <summary>
            用于存放GetInstanceCreator的Dictionary
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicCalls.GetInstanceCreator(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:FWW.Framework.DapperEx.DynamicCalls.dictGetter">
            <summary>
            用于存放GetPropertyGetter的Dictionary
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DynamicCalls.dictSetter">
            <summary>
            用于存放SetPropertySetter的Dictionary
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicCalls.EmitCastToReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="ilGenerator"></param>
            <param name="type"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicCalls.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="ilGenerator"></param>
            <param name="type"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicCalls.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="ilGenerator"></param>
            <param name="value"></param>
        </member>
        <member name="T:FWW.Framework.DapperEx.BaseEntity">
            <summary>
            实体信息
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.EntityUtils">
            <summary>
            实体帮助类
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityUtils.SetValue``1(``0,``0)">
            <summary>
            实体赋值
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="toEntity">被赋值实体</param>
            <param name="fromEntity">来源实体</param>
            <returns>返回null 就表示fromEntity==null</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.EntityUtils.FastExpando">
            <summary>
            
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.JoinType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.JoinType.InnerJoin">
            <summary>
            InnerJoin
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.JoinType.LeftJoin">
            <summary>
            LeftJoin
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.JoinType.RightJoin">
            <summary>
            RightJoin
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.JoinType.CrossJoin">
            <summary>
            CrossJoin
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.JoinType.FullJoin">
            <summary>
            FullJoin
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.EntityState">
            <summary>
            标记实体状态
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.EntityState.Unchanged">
            <summary>
            标记为不做任何数据库操作。
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.EntityState.Added">
            <summary>
            标记为插入状态。.Save()触发。
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.EntityState.Deleted">
            <summary>
            标记为删除状态。.Save()触发。
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.EntityState.Modified">
            <summary>
            标记为修改状态。.Save()触发。
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.#ctor">
            <summary>
            空的构造函数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName"></param>
            <param name="tableName"></param>
            <param name="description"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.#ctor(System.String,System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName"></param>
            <param name="tableName"></param>
            <param name="parameterDbType"></param>
            <param name="parameterSize"></param>
            <param name="description"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.#ctor(System.String,System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName"></param>
            <param name="tableName"></param>
            <param name="parameterDbType"></param>
            <param name="parameterSize"></param>
            <param name="description"></param>
            <param name="aliasName"></param>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.fieldName">
            <summary>
            字段名
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.aliasName">
            <summary>
            字段别名
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.description">
            <summary>
            字段描述
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.parameterDbType">
            <summary>
            字段数据库中类型
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.parameterSize">
            <summary>
            字段数据库中长度
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.All">
            <summary>
            所有字段   就是  *  
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.ParameterDbType">
            <summary>
            字段数据库中类型
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.ParameterSize">
            <summary>
            字段数据库中长度
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.FieldName">
            <summary>
            返回 字段名
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.TableName">
            <summary>
            返回  表名
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.Name">
            <summary>
            返回  别名，当别名为空返回字段名
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.PropertyName">
            <summary>
            返回属性名  即fileName
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.AliasName">
            <summary>
            返回  别名
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.Description">
            <summary>
            返回  字段描述
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.TableFieldName">
            <summary>
            返回  表名.字段名
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.FullName">
            <summary>
            返回  表名.字段名 AS 别名
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.Year">
            <summary>
            datepart   year
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.Month">
            <summary>
            datepart   month
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.Day">
            <summary>
            datepart  day
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.Desc">
            <summary>
            倒叙
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.Asc">
            <summary>
            正序
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Field.GroupBy">
            <summary>
            分组
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Equals(FWW.Framework.DapperEx.Field)">
            <summary>
            比较
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.IsNullOrEmpty(FWW.Framework.DapperEx.Field)">
            <summary>
            判断是否为空
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SetTableName(System.String)">
            <summary>
            设置所属表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.As(System.String)">
            <summary>
            AS
            </summary>
            <param name="aliasName"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.As(FWW.Framework.DapperEx.Field)">
            <summary>
            AS
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.IsNull(FWW.Framework.DapperEx.Field)">
            <summary>
            判断字段是否为Null
            </summary>
            <param name="field">字段实体</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.IsNull(System.Object)">
            <summary>
            判断字段是否为Null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Count">
            <summary>
            Count
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Distinct">
            <summary>
            Distinct
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Sum">
            <summary>
            Sum
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Avg">
            <summary>
            Avg
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Len">
            <summary>
            len
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Trim">
            <summary>
            ltrim and  rtrim
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Max">
            <summary>
            Max
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Min">
            <summary>
            Min
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Left(System.Int32)">
            <summary>
            Left
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Right(System.Int32)">
            <summary>
            Right
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Substring(System.Int32,System.Int32)">
            <summary>
            substring
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.IndexOf(System.String)">
            <summary>
            charindex
            </summary>
            <param name="subString"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Replace(System.String,System.String)">
            <summary>
            replace
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.createWhereClip(FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.QueryOperator)">
            <summary>
            创建whereclip
            </summary>
            <param name="leftField"></param>
            <param name="rightField"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.createField(FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.QueryOperator)">
            <summary>
            创建Field
            </summary>
            <param name="leftField"></param>
            <param name="rightField"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:FWW.Framework.DapperEx.Field.BitwiseAND(FWW.Framework.DapperEx.Field)”忽略有格式错误的 XML 注释 -->
        <member name="M:FWW.Framework.DapperEx.Field.BitwiseOR(FWW.Framework.DapperEx.Field)">
            <summary>
            |
            </summary>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.BitwiseXOR(FWW.Framework.DapperEx.Field)">
            <summary>
            ^
            </summary>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.BitwiseNOT(FWW.Framework.DapperEx.Field)">
            <summary>
            ~
            </summary>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Contain(System.Object)">
            <summary>
            like '%value%' 模糊查询，同Like
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Like(System.Object)">
            <summary>
            like '%value%' 模糊查询，同  Contain
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.BeginWith(System.Object)">
            <summary>
            BeginWith  
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.EndWith(System.Object)">
            <summary>
            EndWith  
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.likeString">
            <summary>
            LIKE %
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.selectInString">
            <summary>
            IN
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Field.selectNotInString">
            <summary>
            NOT IN
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.selectInOrNotIn``1(FWW.Framework.DapperEx.Field,System.String,``0[])">
            <summary>
            子查询
            </summary>
            <param name="field"></param>
            <param name="join"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.selectInOrNotIn``1(FWW.Framework.DapperEx.Field,System.String,System.Boolean,``0[])">
            <summary>
            子查询
            </summary>
            <param name="field"></param>
            <param name="join"></param>
            <param name="isParameter">是否参数化</param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SelectIn(System.Object[])">
            <summary>
            SelectIn  
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.In(System.Object[])">
            <summary>
            同SelectIn。
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SelectIn``1(``0[])">
            <summary>
            where field in (value,value,value)。传入Array或List&lt;T>。
            </summary>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.In``1(``0[])">
            <summary>
            where field in (value,value,value)。同SelectIn。传入Array或List&lt;T>。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SelectIn``1(System.Collections.Generic.List{``0})">
            <summary>
            where field in (value,value,value)。 传入Array或List&lt;T>。
            </summary>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.In``1(System.Collections.Generic.List{``0})">
            <summary>
            where field in (value,value,value)。同SelectIn。传入Array或List&lt;T>。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SelectNotIn(System.Object[])">
            <summary>
            where field in (value,value,value)。同In.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.NotIn(System.Object[])">
            <summary>
            同SelectNotIn。
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SelectNotIn``1(``0[])">
            <summary>
            SelectNotIn  。传入Array或List&lt;T>。
            </summary>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.NotIn``1(``0[])">
            <summary>
            同SelectNotIn。传入Array或List&lt;T>。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SelectNotIn``1(System.Collections.Generic.List{``0})">
            <summary>
            SelectNotIn。传入Array或List&lt;T>。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.NotIn``1(System.Collections.Generic.List{``0})">
            <summary>
            同SelectNotIn。传入Array或List&lt;T>。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SubQueryIn(FWW.Framework.DapperEx.FromSection)">
            <summary>
            SubQueryIn   子查询  
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SubQueryNotIn(FWW.Framework.DapperEx.FromSection)">
            <summary>
            SubQueryNotIn   子查询  
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.subQuery(FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.FromSection,FWW.Framework.DapperEx.QueryOperator)">
            <summary>
            组合 子查询
            </summary>
            <param name="field"></param>
            <param name="from"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.subQuery(FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.FromSection,System.String)">
            <summary>
            组合 子查询
            </summary>
            <param name="field"></param>
            <param name="from"></param>
            <param name="join"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SubQueryEqual(FWW.Framework.DapperEx.FromSection)">
            <summary>
            SubQueryEqual   子查询  
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SubQueryNotEqual(FWW.Framework.DapperEx.FromSection)">
            <summary>
            SubQueryNotEqual   子查询  
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SubQueryLess(FWW.Framework.DapperEx.FromSection)">
            <summary>
            SubQueryLess   子查询  
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SubQueryLessOrEqual(FWW.Framework.DapperEx.FromSection)">
            <summary>
            SubQueryLessOrEqual   子查询  
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SubQueryGreater(FWW.Framework.DapperEx.FromSection)">
            <summary>
            SubQueryGreater   子查询  
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.SubQueryGreaterOrEqual(FWW.Framework.DapperEx.FromSection)">
            <summary>
            SubQueryGreaterOrEqual   子查询  
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.IsNull">
            <summary>
            字段 为null <example>field is null</example>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.IsNotNull">
            <summary>
            字段 为null <example>field is not null</example>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.Between(System.Object,System.Object)">
            <summary>
            Between操作
            </summary>
            <example>
            <![CDATA[ a>=value and a<=value ]]>
            </example>
            <param name="leftValue"></param>
            <param name="rightValue"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Addition(FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.Field)">
            <summary>
            +
            </summary>
            <param name="leftField"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Subtraction(FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.Field)">
            <summary>
            -
            </summary>
            <param name="leftField"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Multiply(FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.Field)">
            <summary>
            *
            </summary>
            <param name="leftField"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Division(FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.Field)">
            <summary>
            /
            </summary>
            <param name="leftField"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Modulus(FWW.Framework.DapperEx.Field,FWW.Framework.DapperEx.Field)">
            <summary>
            %
            </summary>
            <param name="leftField"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Addition(FWW.Framework.DapperEx.Field,System.Object)">
            <summary>
            +
            </summary>
            <param name="leftField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Subtraction(FWW.Framework.DapperEx.Field,System.Object)">
            <summary>
            -
            </summary>
            <param name="leftField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Multiply(FWW.Framework.DapperEx.Field,System.Object)">
            <summary>
            *
            </summary>
            <param name="leftField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Division(FWW.Framework.DapperEx.Field,System.Object)">
            <summary>
            /
            </summary>
            <param name="leftField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Modulus(FWW.Framework.DapperEx.Field,System.Object)">
            <summary>
            %
            </summary>
            <param name="leftField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Addition(System.Object,FWW.Framework.DapperEx.Field)">
            <summary>
            +
            </summary>
            <param name="value"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Subtraction(System.Object,FWW.Framework.DapperEx.Field)">
            <summary>
            -
            </summary>
            <param name="value"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Multiply(System.Object,FWW.Framework.DapperEx.Field)">
            <summary>
            *
            </summary>
            <param name="value"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Division(System.Object,FWW.Framework.DapperEx.Field)">
            <summary>
            /
            </summary>
            <param name="value"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Field.op_Modulus(System.Object,FWW.Framework.DapperEx.Field)">
            <summary>
            %
            </summary>
            <param name="value"></param>
            <param name="rightField"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.FieldAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.FieldExtend.Tips">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.Like(System.Object,System.Object)">
            <summary>
            like '%value%' 模糊查询，同Contains。
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.In``1(System.Object,``0[])">
            <summary>
            where field in (value,value,value)。传入Array或List&lt;T>。
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.In``1(System.Object,System.Collections.Generic.List{``0})">
            <summary>
            where field in (value,value,value)。传入Array或List&lt;T>。
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.NotIn``1(System.Object,``0[])">
            <summary>
            where field not in (value,value,value)。传入Array或List&lt;T>。
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.NotIn``1(System.Object,System.Collections.Generic.List{``0})">
            <summary>
            where field not in (value,value,value)。传入Array或List&lt;T>。
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.IsNull(System.Object)">
            <summary>
            IS NULL
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.IsNotNull(System.Object)">
            <summary>
            IS NOT NULL
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.As(System.Object,System.String)">
            <summary>
            As
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.Sum(System.Object)">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.Count(System.Object)">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.Avg(System.Object)">
            <summary>
            Avg
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FieldExtend.Len(System.Object)">
            <summary>
            Len
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.LogHandler">
            <summary>
            A delegate used for log.
            </summary>
            <param name="logMsg">The msg to write to log.</param>
        </member>
        <member name="T:FWW.Framework.DapperEx.ILogable">
            <summary>
            Mark a implementing class as loggable.
            </summary>
        </member>
        <member name="E:FWW.Framework.DapperEx.ILogable.OnLog">
            <summary>
            OnLog event.
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SerializationManager">
            <summary>
            The serialization manager.
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SerializationManager.TypeSerializeHandler">
            <summary>
            The serialize delegate.
            </summary>
            <param name="obj">obj to be serialized.</param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.SerializationManager.TypeDeserializeHandler">
            <summary>
            The deserialize delegate.
            </summary>
            <param name="data">the data to be deserialied.</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SerializationManager.Serialize(System.Object)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SerializationManager.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified return type.
            </summary>
            <param name="returnType">Type of the return.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SerializationManager.RegisterSerializeHandler(System.Type,FWW.Framework.DapperEx.SerializationManager.TypeSerializeHandler,FWW.Framework.DapperEx.SerializationManager.TypeDeserializeHandler)">
            <summary>
            Registers the serialize handler.
            </summary>
            <param name="type">The type.</param>
            <param name="serializeHandler">The serialize handler.</param>
            <param name="deserializeHandler">The deserialize handler.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SerializationManager.UnregisterSerializeHandler(System.Type)">
            <summary>
            Unregisters the serialize handler.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:FWW.Framework.DapperEx.Database">
            <summary>
            Database
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Database.Default">
            <summary>
            Default Database
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.#ctor(FWW.Framework.DapperEx.DbProvider)">
            <summary>
            构造函数
            </summary>
            <param name="dbProvider"></param>
        </member>
        <member name="P:FWW.Framework.DapperEx.Database.ConnectionString">
            <summary>
            Gets the connect string.
            </summary>
            <value>The connect string.</value>
        </member>
        <member name="P:FWW.Framework.DapperEx.Database.DbProviderFactory">
            <summary>
            Gets the DbProviderFactory
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Database.DbProvider">
            <summary>
            Gets the db provider.
            </summary>
            <value>The db provider.</value>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.WriteLog(System.Data.Common.DbCommand)">
            <summary>
            Writes the log.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.CloseConnection(System.Data.Common.DbCommand)">
            <summary>
            Closes the connection.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.CloseConnection(System.Data.Common.DbConnection)">
            <summary>
            Closes the connection.
            </summary>
            <param name="conn">The conn.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.CloseConnection(System.Data.Common.DbTransaction)">
            <summary>
            Closes the connection.
            </summary>
            <param name="tran">The tran.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.GetConnection">
            <summary>
            Gets the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.GetConnection(System.Boolean)">
            <summary>
            Gets the connection.
            </summary>
            <param name="tryOpen">if set to <c>true</c> [try open].</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.CreateConnection">
            <summary>
            <para>When overridden in a derived class, gets the connection for this database.</para>
            <seealso cref="T:System.Data.Common.DbConnection"/>        
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.Common.DbConnection"/> for this database.</para>
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.CreateConnection(System.Boolean)">
            <summary>
            <para>When overridden in a derived class, gets the connection for this database.</para>
            <seealso cref="T:System.Data.Common.DbConnection"/>        
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.Common.DbConnection"/> for this database.</para>
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.GetStoredProcCommand(System.String)">
            <summary>
            <para>When overridden in a derived class, creates a <see cref="T:System.Data.Common.DbCommand"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the stored procedure.</para></returns>       
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.GetSqlStringCommand(System.String)">
            <summary>
            <para>When overridden in a derived class, creates an <see cref="T:System.Data.Common.DbCommand"/> for a SQL query.</para>
            </summary>
            <param name="query"><para>The text of the query.</para></param>        
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the SQL query.</para></returns>        
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.GetDataAdapter">
            <summary>
            Gets a DbDataAdapter with Standard update behavior.
            </summary>
            <returns>A <see cref="T:System.Data.Common.DbDataAdapter"/>.</returns>
            <seealso cref="T:System.Data.Common.DbDataAdapter"/>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.LoadDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            <para>Loads a <see cref="T:System.Data.DataSet"/> from command text in a transaction.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command in.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> within the given 
            <paramref name="transaction" /> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String)">
            <summary>
            <para>Executes the <paramref name="command"/> and adds a new <see cref="T:System.Data.DataTable"></see> to the existing <see cref="T:System.Data.DataSet"></see>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to load.</para>
            </param>
            <param name="tableName">
            <para>The name for the new <see cref="T:System.Data.DataTable"/> to add to the <see cref="T:System.Data.DataSet"/>.</para>
            </param>        
            <exception cref="T:System.ArgumentNullException">Any input parameter was <see langword="null"/> (<b>Nothing</b> in Visual Basic)</exception>
            <exception cref="T:System.ArgumentException">tableName was an empty string</exception>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within the given <paramref name="transaction" /> and adds a new <see cref="T:System.Data.DataTable"></see> to the existing <see cref="T:System.Data.DataSet"></see>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to load.</para>
            </param>
            <param name="tableName">
            <para>The name for the new <see cref="T:System.Data.DataTable"/> to add to the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>        
            <exception cref="T:System.ArgumentNullException">Any input parameter was <see langword="null"/> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">tableName was an empty string.</exception>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String[])">
            <summary>
            <para>Loads a <see cref="T:System.Data.DataSet"/> from a <see cref="T:System.Data.Common.DbCommand"/>.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String[],System.Data.Common.DbTransaction)">
            <summary>
            <para>Loads a <see cref="T:System.Data.DataSet"/> from a <see cref="T:System.Data.Common.DbCommand"/> in  a transaction.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command in.</para>
            </param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.LoadDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            <para>Loads a <see cref="T:System.Data.DataSet"/> from command text.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para></param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="command"/>.</returns>        
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteDataSet(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> as part of the <paramref name="transaction" /> and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para></param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="command"/>.</returns>        
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="commandText"/>.</para>
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> as part of the given <paramref name="transaction" /> and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="commandText"/>.</para>
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteScalar(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within a <paramref name="transaction" />, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" />  and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> 
            within the given <paramref name="transaction" /> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>       
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteNonQuery(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within the given <paramref name="transaction" />, and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> and returns the number of rows affected.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The number of rows affected.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteNonQuery(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> as part of the given <paramref name="transaction" /> and returns the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The number of rows affected</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.ExecuteReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within a transaction and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="il">The il.</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>       
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object to the command.</para>
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>    
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddOutParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds a new Out <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the out parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the column.</para></param>        
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the in parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <remarks>
            <para>This version of the method is used when you can have the same parameter object multiple times with different values.</para>
            </remarks>        
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The commmand to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The commmand to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>       
            <param name="size">size</param>
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddInParameter(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The commmand to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the value.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddInputOutputParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Adds a new In and Out
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddReturnValueParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds a new return
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddParameter(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            Adds parameters
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Database.AddCommandParameter(System.Data.Common.DbCommand,FWW.Framework.DapperEx.SqlDataParameter)">
            <summary>
            给命令添加参数  where paramters
            </summary>
            <param name="command"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="P:FWW.Framework.DapperEx.Database.IsBatchConnection">
            <summary>
            Gets a value indicating whether this instance is batch connection.
            </summary>
            <value>
            	<c>true</c> if this instance is batch connection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:FWW.Framework.DapperEx.WhereType">
            <summary>
            条件类型
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereType.JoinWhere">
            <summary>
            join where
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereType.Where">
            <summary>
            常规Where
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.QueryOperator">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.Equal">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.NotEqual">
            <summary>
            &lt;&gt; 、 !=、不等于
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.Greater">
            <summary>
            >
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.Less">
            <summary>
            &lt; 小于
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.GreaterOrEqual">
            <summary>
            >=
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.LessOrEqual">
            <summary>
            &lt;= 小于等于
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.Like">
            <summary>
            LIKE
            </summary>
        </member>
        <!-- 对于成员“F:FWW.Framework.DapperEx.QueryOperator.BitwiseAND”忽略有格式错误的 XML 注释 -->
        <member name="F:FWW.Framework.DapperEx.QueryOperator.BitwiseOR">
            <summary>
            |
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.BitwiseXOR">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.BitwiseNOT">
            <summary>
            ~
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.IsNULL">
            <summary>
            IS NULL
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.IsNotNULL">
            <summary>
            IS NOT NULL
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.Add">
            <summary>
             +
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.Subtract">
            <summary>
            -
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.Multiply">
            <summary>
            *
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.Divide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.Modulo">
            <summary>
            %
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.In">
            <summary>
            in
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.QueryOperator.NotIn">
            <summary>
            not in
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Expression.expressionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.Expression.parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Expression.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Expression.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="expressionString"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Expression.#ctor(System.String,FWW.Framework.DapperEx.SqlDataParameter)">
            <summary>
            构造函数
            </summary>
            <param name="expressionString"></param>
            <param name="sqlparameters"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Expression.#ctor(FWW.Framework.DapperEx.Field,System.Object,FWW.Framework.DapperEx.QueryOperator)">
            <summary>
            构造函数
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="oper"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Expression.#ctor(FWW.Framework.DapperEx.Field,System.Object,FWW.Framework.DapperEx.QueryOperator,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <param name="oper">操作符</param>
            <param name="isFieldBefore">字段放前面</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Expression.GenerateExpress(FWW.Framework.DapperEx.SqlDataParameter)">
            <summary>
            生成表达式
            </summary>
            <param name="sqldataparamters"></param>
            <returns></returns>
        </member>
        <member name="P:FWW.Framework.DapperEx.Expression.Parameters">
            <summary>
            返回参数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Expression.ToString">
            <summary>
            返回组合字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ExpressionComparer.CompareNull``1(``0,``0,System.Int32@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <param name="result"></param>
            <returns>can stop comparing or not</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.ExpressionToClip`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FWW.Framework.DapperEx.ExpressionToClip`1.ToJoinWhere``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ExpressionToClip`1.ToWhereClip(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="sqldataParameter"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ExpressionToClip`1.ToWhereClip``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ExpressionToClip`1.GetMemberName(System.Linq.Expressions.Expression,FWW.Framework.DapperEx.ColumnFunction@,System.Linq.Expressions.MemberExpression@)">
            <summary>
            
            </summary>
            <param name="expr"></param>
            <param name="function"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.GroupByClip">
            <summary>
            分组
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.GroupByClip.IsNullOrEmpty(FWW.Framework.DapperEx.GroupByClip)">
            <summary>
            判断 GroupByClip  是否为null
            </summary>
            <param name="groupByClip"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.GroupByClip.op_BitwiseAnd(FWW.Framework.DapperEx.GroupByClip,FWW.Framework.DapperEx.GroupByClip)">
            <summary>
            两个GroupByClip相加
            </summary>
            <param name="leftGroupByClip"></param>
            <param name="rightGroupByClip"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.GroupByClip.RemovePrefixTableName">
            <summary>
            去掉的表前缀
            </summary>
            <returns></returns>
        </member>
        <member name="P:FWW.Framework.DapperEx.GroupByClip.GroupByString">
            <summary>
            GroupByString
            <example>
            group by id
            </example>
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.GroupByClip.op_True(FWW.Framework.DapperEx.GroupByClip)">
            <summary>
            
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.GroupByClip.op_False(FWW.Framework.DapperEx.GroupByClip)">
            <summary>
            
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.GroupByClip.Equals(FWW.Framework.DapperEx.GroupByClip)">
            <summary>
            比较
            </summary>
            <param name="groupByClip"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.LambdaWhereClip`1">
            <summary>
            条件
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.LambdaWhereClip`1.All">
            <summary>
            All
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.LambdaWhereClip`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.OrderByOperater">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.OrderByClip">
            <summary>
            排序
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.OrderByClip.None">
            <summary>
            null
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.OrderByClip.IsNullOrEmpty(FWW.Framework.DapperEx.OrderByClip)">
            <summary>
            判断 OrderByClip  是否为null
            </summary>
            <param name="orderByClip"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.OrderByClip.op_BitwiseAnd(FWW.Framework.DapperEx.OrderByClip,FWW.Framework.DapperEx.OrderByClip)">
            <summary>
            两个OrderByClip相加
            </summary>
            <param name="leftOrderByClip"></param>
            <param name="rightOrderByClip"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.OrderByClip.RemovePrefixTableName">
            <summary>
            去掉的表前缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.OrderByClip.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FWW.Framework.DapperEx.OrderByClip.ReverseOrderByClip">
            <summary>
            倒叙
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.OrderByClip.Equals(FWW.Framework.DapperEx.OrderByClip)">
            <summary>
            比较
            </summary>
            <param name="orderByClip"></param>
            <returns></returns>
        </member>
        <member name="P:FWW.Framework.DapperEx.OrderByClip.OrderByString">
            <summary>
            OrderByString
            <example>
            order by id desc
            </example>
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Parameter.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <param name="parameterValue"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Parameter.#ctor(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <param name="parameterValue"></param>
            <param name="parameterDbType"></param>
            <param name="parameterSize"></param>
        </member>
        <member name="P:FWW.Framework.DapperEx.Parameter.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Parameter.ParameterValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Parameter.ParameterDbType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.Parameter.ParameterSize">
            <summary>
            长度
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Parameters.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Parameters.AddRange(System.Collections.Generic.IEnumerable{FWW.Framework.DapperEx.Parameter})">
            <summary>
            添加
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Parameters.AddRange(FWW.Framework.DapperEx.Parameters)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Parameters.Add(FWW.Framework.DapperEx.Parameter)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.Parameters.AutoAddPreChar(System.String,System.Object)">
            <summary>
            自动添加@前缀
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:FWW.Framework.DapperEx.PartialEvaluatorBase.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.WhereClip">
            <summary>
            条件
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereClip.All">
            <summary>
            All
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.#ctor(System.String,FWW.Framework.DapperEx.SqlDataParameter)">
            <summary>
            
            </summary>
            <param name="customWhereString"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.#ctor(FWW.Framework.DapperEx.Field,System.Object,FWW.Framework.DapperEx.QueryOperator)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="oper"></param>
        </member>
        <member name="P:FWW.Framework.DapperEx.WhereClip.Where">
            <summary>
            返回  where
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.WhereClip.WhereSql">
            <summary>
            WhereString    
            <example>
            where 1=1
            </example>
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.op_Implicit(System.String)~FWW.Framework.DapperEx.WhereClip">
            <summary>
            隐式转换
            </summary>
            <param name="whereString"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.Equals(FWW.Framework.DapperEx.WhereClip,FWW.Framework.DapperEx.WhereClip)">
            <summary>
            判断条件是否一样
            </summary>
            <param name="leftWhere"></param>
            <param name="rightWhere"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.IsNullOrEmpty(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            判断 WhereClip  是否为null
            </summary>
            <param name="whereClip"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.And(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            And
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.Or(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Or
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.op_True(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.op_False(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.op_BitwiseAnd(FWW.Framework.DapperEx.WhereClip,FWW.Framework.DapperEx.WhereClip)">
            <summary>
            And
            </summary>
            <param name="leftWhere"></param>
            <param name="rightWhere"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.op_BitwiseOr(FWW.Framework.DapperEx.WhereClip,FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Or
            </summary>
            <param name="leftWhere"></param>
            <param name="rightWhere"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.op_LogicalNot(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            not
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClip.Exists(FWW.Framework.DapperEx.FromSection)">
            <summary>
            EXISTS
            </summary>
            <param name="fromSection"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.Where">
            <summary>
            
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.Where`1">
            <summary>
            Where条件拼接，同WhereClipBuilder
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Where`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            AND
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Where`1.And``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            AND
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Where`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.WhereClipBuilder`1">
            <summary>
            Where条件拼接，同Where类
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClipBuilder`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            AND
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClipBuilder`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.WhereClipBuilder">
            <summary>
            WhereClipBuilder
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereClipBuilder.expressionStringBuilder">
            <summary>
            条件字符串
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereClipBuilder.parameters">
            <summary>
            条件参数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClipBuilder.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClipBuilder.#ctor(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            构造函数
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClipBuilder.And(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            AND
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClipBuilder.Or(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Or
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereClipBuilder.ToWhereClip">
            <summary>
            转换成WhereClip
            </summary>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.FromSection`1">
            <summary>
            查询
            </summary>
            <typeparam name="T"></typeparam>    
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.#ctor(FWW.Framework.DapperEx.Database,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
            <param name="withNolock"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.#ctor(FWW.Framework.DapperEx.Database,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
            <param name="trans"></param>
            <param name="withNolock"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.InnerJoin``1(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Inner Join。Lambda写法：.InnerJoin&lt;Model2>((d1,d2) => d1.ID == d2.ID)
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.InnerJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join。Lambda写法：.InnerJoin&lt;Model2>((d1,d2) => d1.ID == d2.ID)
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.CrossJoin``1(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Cross Join
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.RightJoin``1(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Right Join
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="lambdaWhere"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.LeftJoin``1(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Left Join。经典写法：Model1._.ID == Model2._.ID
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join。Lambda写法：.LeftJoin&lt;Model2>((d1,d2) => d1.ID == d2.ID)
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="lambdaWhere"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.FullJoin``1(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Full Join
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.join(System.String,FWW.Framework.DapperEx.WhereClip,FWW.Framework.DapperEx.JoinType)">
            <summary>
            连接
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <param name="joinType"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.setPrimarykeyOrderby">
            <summary>
             设置默认主键排序 
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Having(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Having 
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Having(FWW.Framework.DapperEx.Where)">
            <summary>
            
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Where(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            whereclip
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Where(FWW.Framework.DapperEx.Where{`0})">
            <summary>
            whereclip
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Where(FWW.Framework.DapperEx.Where)">
            <summary>
            whereclip
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Where``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Where``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Where``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Where``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Boolean}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.GroupBy(FWW.Framework.DapperEx.GroupByClip)">
            <summary>
            groupby
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.GroupBy(FWW.Framework.DapperEx.Field[])">
            <summary>
            groupby
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.OrderBy(FWW.Framework.DapperEx.Field[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.OrderByDescending(FWW.Framework.DapperEx.Field[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.OrderBy(FWW.Framework.DapperEx.OrderByClip)">
            <summary>
            
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            orderby
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.OrderBy(FWW.Framework.DapperEx.OrderByClip[])">
            <summary>
            orderby
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Select(FWW.Framework.DapperEx.Field[])">
            <summary>
            select field
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Object}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Select``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Object}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Select``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Object}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Select``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Object}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Select``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Distinct">
            <summary>
            Distinct
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Top(System.Int32)">
            <summary>
            Top
            </summary>
            <param name="topCount"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Page(System.Int32,System.Int32)">
            <summary>
            Page
            </summary>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.setDefaultOrderby">
            <summary>
            设置默认排序
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.From(System.Int32,System.Int32)">
            <summary>
            From  1-10
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.SetCacheTimeOut(System.Int32)">
            <summary>
            设置缓存有效期  单位：秒
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Refresh">
            <summary>
            重新加载
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.AddSelect(FWW.Framework.DapperEx.FromSection)">
            <summary>
            select sql
            </summary>
            <param name="fromSection"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.AddSelect(FWW.Framework.DapperEx.FromSection,System.String)">
            <summary>
            select sql
            </summary>
            <param name="fromSection"></param>
            <param name="aliasName">别名</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.ToList``1">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.ToList">
            <summary>
            To List&lt;T>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.ToEnumerable">
            <summary>
            返回懒加载数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.ToFirstDefault">
            <summary>
            返回第一个实体  如果为null，则默认实例化一个
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.First">
            <summary>
            返回第一个实体，同ToFirst()。无数据返回Null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.First``1">
            <summary>
            返回第一个实体，同ToFirst()。无数据返回Null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.ToFirst``1">
            <summary>
            返回第一个实体 ，同First()。无数据返回Null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.ToFirst">
            <summary>
            返回第一个实体 ，同First()。无数据返回Null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.Union(FWW.Framework.DapperEx.FromSection)">
            <summary>
            Union
            </summary>
            <param name="fromSection"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection`1.UnionAll(FWW.Framework.DapperEx.FromSection)">
            <summary>
            Union All
            </summary>        
            <param name="fromSection"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.FromSection">
            <summary>
            查询
            </summary>    
        </member>
        <member name="F:FWW.Framework.DapperEx.FromSection.startIndex">
            <summary>
            开始项
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.FromSection.endIndex">
            <summary>
            结束项
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.FromSection.timeout">
            <summary>
            缓存超时时间
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.FromSection.typeTableName">
            <summary>
            
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.FromSection.isRefresh">
            <summary>
            是否重新加载
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.FromSection.isPageFromSection">
            <summary>
            是否已经执行过分页
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.FromSection.trans">
            <summary>
            事务   -- 查询
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.DbProvider">
            <summary>
            DbProvider。
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.Database">
            <summary>
            DbProvider。
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.DistinctString">
            <summary>
            设置 distinct
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.PrefixString">
            <summary>
            前置值如 Top N
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.LimitString">
            <summary>
            limit 
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.CountSqlString">
            <summary>
            记录数sql语句 count
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.SqlNoneOrderbyString">
            <summary>
            没有没有排序字段
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.FromString">
            <summary>
            
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.Joins">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.SqlString">
            <summary>
            获取 sql语句
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.TableName">
            <summary>
            返回  表名
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.OrderByClip">
            <summary>
            返回  排序
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.OrderByString">
            <summary>
            返回排序字符串  例如：orderby id desc
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.GroupByClip">
            <summary>
            返回 分组
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.GroupByString">
            <summary>
            返回排序字符串 例如：group by id
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.GetWhereClip">
            <summary>
            返回 条件
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.Parameters">
            <summary>
            返回 参数  (包含where 和 from)
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.ColumnsString">
            <summary>
            返回  选择列
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FromSection.Fields">
            <summary>
            查询的字段
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.#ctor(FWW.Framework.DapperEx.Database,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.#ctor(FWW.Framework.DapperEx.Database,System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
            <param name="tableName"></param>
            <param name="trans"></param>
            <param name="withNolock">默认为false</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.SetCacheTimeOut(System.Int32)">
            <summary>
            设置缓存有效期  单位：秒
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Refresh">
            <summary>
            重新加载
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Where(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            whereclip
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.GroupBy(FWW.Framework.DapperEx.GroupByClip)">
            <summary>
            groupby
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Having(FWW.Framework.DapperEx.WhereClip)">
            <summary>
            having条件
            </summary>
            <param name="havingWhere"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.GroupBy(FWW.Framework.DapperEx.Field[])">
            <summary>
            groupby
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.OrderBy(FWW.Framework.DapperEx.OrderByClip)">
            <summary>
            orderby
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.OrderBy(FWW.Framework.DapperEx.OrderByClip[])">
            <summary>
            orderby
            </summary>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Select(FWW.Framework.DapperEx.Field[])">
            <summary>
            select field
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.AddSelect(FWW.Framework.DapperEx.FromSection)">
            <summary>
            select sql
            </summary>
            <param name="fromSection"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.AddSelect(FWW.Framework.DapperEx.FromSection,System.String)">
            <summary>
            select sql
            </summary>
            <param name="fromSection"></param>
            <param name="aliasName">别名</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.AddSelect(FWW.Framework.DapperEx.Field[])">
            <summary>
            add select field
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Distinct">
            <summary>
            Distinct
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Top(System.Int32)">
            <summary>
            Top
            </summary>
            <param name="topCount"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Page(System.Int32,System.Int32)">
            <summary>
            Page
            </summary>
            <param name="pageSize">每页数</param>
            <param name="pageIndex">第几页</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.From(System.Int32,System.Int32)">
            <summary>
            From startIndex to endIndex
            </summary>
            <param name="startIndex">开始记录数</param>
            <param name="endIndex">结束记录数</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.formatSql(System.String,FWW.Framework.DapperEx.FromSection)">
            <summary>
            格式化sql语句
            </summary>
            <param name="sql"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Count">
            <summary>
            获取记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Count(FWW.Framework.DapperEx.FromSection)">
            <summary>
            获取记录数(内部使用)
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.ToDataSet">
            <summary>
            To DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.getPagedFromSection">
            <summary>
            获取分页过的FromSection
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.createDbCommand(FWW.Framework.DapperEx.FromSection)">
            <summary>
            创建  查询的DbCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.ToDataReader">
            <summary>
            To DataReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.ToDataReader(FWW.Framework.DapperEx.FromSection)">
            <summary>
             To DataReader
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.ToDataTable">
            <summary>
            To DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.ToScalar">
            <summary>
            To Scalar
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.ToScalar``1">
            <summary>
            To Scalar
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.join(System.String,FWW.Framework.DapperEx.WhereClip,FWW.Framework.DapperEx.JoinType)">
            <summary>
            连接
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <param name="joinType"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.InnerJoin(System.String,FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Inner Join
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.LeftJoin(System.String,FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Left Join
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.RightJoin(System.String,FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Right Join
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.CrossJoin(System.String,FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Cross Join
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.FullJoin(System.String,FWW.Framework.DapperEx.WhereClip)">
            <summary>
            Full Join
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.Union(FWW.Framework.DapperEx.FromSection)">
            <summary>
            Union
            </summary>
            <param name="fromSection"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.FromSection.UnionAll(FWW.Framework.DapperEx.FromSection)">
            <summary>
            Union All
            </summary>
            <param name="fromSection"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.ProcedureSection">
            <summary>
            执行存储过程
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.#ctor(FWW.Framework.DapperEx.Database,System.String)">
            <summary>
            
            </summary>
            <param name="dbSession"></param>
            <param name="procName"></param>
        </member>
        <member name="F:FWW.Framework.DapperEx.ProcedureSection.outParameters">
            <summary>
            返回的参数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.SetDbTransaction(System.Data.Common.DbTransaction)">
            <summary>
            设置事务
            </summary>
            <param name="tran"></param>
            <returns></returns>
        </member>
        <member name="P:FWW.Framework.DapperEx.ProcedureSection.isParameterSpecial">
            <summary>
            存储过程参数不要加前缀
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.getParameterName(System.String)">
            <summary>
            获取参数名字
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.GetReturnValues">
            <summary>
            返回存储过程返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.AddParameter(System.Data.Common.DbParameter[])">
            <summary>
            添加参数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.AddInParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            添加输出参数
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            添加输出参数
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.AddInputOutputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            添加输入输出参数
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.AddInputOutputParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            添加输入输出参数
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.AddReturnValueParameter(System.String,System.Data.DbType)">
            <summary>
            添加返回参数
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.AddReturnValueParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            添加返回参数
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.executeBefore">
            <summary>
            操作参数名称
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.ToScalar">
            <summary>
            返回单个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.ToDataReader">
            <summary>
            返回DataReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.ToDataSet">
            <summary>
            返回DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProcedureSection.ExecuteNonQuery">
            <summary>
            执行ExecuteNonQuery
            </summary>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.DatabaseType">
            <summary>
            Type of a database.
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DatabaseType.SqlServer">
            <summary>
            SQL Server 2000
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DatabaseType.MsAccess">
            <summary>
            MsAccess
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DatabaseType.SqlServer9">
            <summary>
            SQL Server 2005
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DatabaseType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DatabaseType.Sqlite3">
            <summary>
            Sqlite
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DatabaseType.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.DbProvider">
            <summary>
            DbProvider
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DbProvider.likeToken">
            <summary>
            like符号。 --- 2015-09-07
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DbProvider.leftToken">
            <summary>
            【
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DbProvider.paramPrefixToken">
            <summary>
            参数前缀
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DbProvider.rightToken">
            <summary>
            】
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DbProvider.dbProviderFactory">
            <summary>
            The db provider factory.
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DbProvider.dbConnStrBuilder">
            <summary>
            The db connection string builder
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DbProvider.#ctor(System.String,System.Data.Common.DbProviderFactory,System.Char,System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:DbProvider"/> class.
            </summary>
            <param name="connectionString">The conn STR.</param>
            <param name="dbProviderFactory">The db provider factory.</param>
            <param name="leftToken">leftToken</param>
            <param name="paramPrefixToken">paramPrefixToken</param>
            <param name="rightToken">rightToken</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DbProvider.#ctor(System.String,System.Data.Common.DbProviderFactory,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:DbProvider"/> class.
            </summary>
            <param name="connectionString">The conn STR.</param>
            <param name="dbProviderFactory">The db provider factory.</param>
            <param name="leftToken">leftToken</param>
            <param name="paramPrefixToken">paramPrefixToken</param>
            <param name="rightToken">rightToken</param>
            <param name="likeToken">likeToken</param>
        </member>
        <member name="F:FWW.Framework.DapperEx.DbProvider.databaseType">
            <summary>
            
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbProvider.DatabaseType">
            <summary>
            ConnectionStrings 节点名称
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbProvider.ConnectionStringsName">
            <summary>
            ConnectionStrings 节点名称
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbProvider.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbProvider.DbProviderFactory">
            <summary>
            Gets the db provider factory.
            </summary>
            <value>The db provider factory.</value>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbProvider.ParamPrefix">
            <summary>
            Gets the param prefix.
            </summary>
            <value>The param prefix.</value>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbProvider.LeftToken">
            <summary>
            Gets the left token of table name or column name.
            </summary>
            <value>The left token.</value>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbProvider.RightToken">
            <summary>
            Gets the right token of table name or column name.
            </summary>
            <value>The right token.</value>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbProvider.RowAutoID">
            <summary>
            自增长字段查询语句
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbProvider.SupportBatch">
            <summary>
            是否支持批量sql提交
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DbProvider.BuildParameterName(System.String)">
            <summary>
            Builds the name of the parameter.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DbProvider.BuildTableName(System.String)">
            <summary>
            Builds the name of the table.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DbProvider.CreatePageFromSection(FWW.Framework.DapperEx.FromSection,System.Int32,System.Int32)">
            <summary>
            创建分页查询
            </summary>
            <param name="fromSection"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DbProvider.PrepareCommand(System.Data.Common.DbCommand)">
            <summary>
            调整DbCommand命令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DbProvider.GenerateFromTableName(System.String,System.Boolean)">
            <summary>
            生成表名
            </summary>
            <param name="tablename"></param>
            <param name="withnolock"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.Oracle.OracleProvider">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Oracle.OracleProvider.CreatePageFromSection(FWW.Framework.DapperEx.FromSection,System.Int32,System.Int32)">
            <summary>
            创建分页查询
            </summary>
            <param name="fromSection"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Oracle.OracleProvider.PrepareCommand(System.Data.Common.DbCommand)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="T:FWW.Framework.DapperEx.ProviderFactory">
            <summary>
            The db provider factory.
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProviderFactory.CreateDbProvider(System.String,System.String,System.String,System.Nullable{FWW.Framework.DapperEx.DatabaseType})">
            <summary>
            创建数据库事件提供程序
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="className">Name of the class.</param>
            <param name="connectionString">The conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="P:FWW.Framework.DapperEx.ProviderFactory.Default">
            <summary>
            Gets the default db provider.
            </summary>
            <value>The default.</value>
        </member>
        <member name="M:FWW.Framework.DapperEx.ProviderFactory.CreateDbProvider(System.String)">
            <summary>
            Creates the db provider.
            </summary>
            <param name="connStrName">Name of the conn STR.</param>
            <returns>The db provider.</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlServer9.SqlServer9Provider">
            <summary>
            Sql Server 2005
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlServer9.SqlServer9Provider.CreatePageFromSection(FWW.Framework.DapperEx.FromSection,System.Int32,System.Int32)">
            <summary>
            创建分页查询
            </summary>
            <param name="fromSection"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlServer.SqlServerProvider">
            <summary>
            SqlServer 
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlServer.SqlServerProvider.BuildParameterName(System.String)">
            <summary>
            Builds the name of the parameter.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.Section">
            <summary>
            Section
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.ToScalar">
            <summary>
            返回单个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.ToScalar``1">
            <summary>
            返回单个值
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.ToDataReader">
            <summary>
            返回DataReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.ToDataSet">
            <summary>
            返回DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.ToDataTable">
            <summary>
            返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.ExecuteNonQuery">
            <summary>
            执行ExecuteNonQuery
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.First``1">
            <summary>
            返回第一个实体，同ToFirst()。无数据返回Null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.ToFirst``1">
            <summary>
            返回单个实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.ToFirstDefault``1">
            <summary>
            返回单个实体
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.Section.ToList``1">
            <summary>
            返回实体列表
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlSection">
            <summary>
            执行sql语句
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlSection.#ctor(FWW.Framework.DapperEx.Database,System.String)">
            <summary>
            
            </summary>
            <param name="dbSession"></param>
            <param name="sql"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlSection.SetDbTransaction(System.Data.Common.DbTransaction)">
            <summary>
            设置事务
            </summary>
            <param name="tran"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:FWW.Framework.DapperEx.SqlSection.AddParameter(System.Data.Common.DbParameter[])”忽略有格式错误的 XML 注释 -->
        <member name="M:FWW.Framework.DapperEx.SqlSection.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            添加参数
            </summary>
        </member>
        <!-- 对于成员“M:FWW.Framework.DapperEx.SqlSection.AddInParameter(System.String,System.Data.DbType,System.Int32,System.Object)”忽略有格式错误的 XML 注释 -->
        <member name="F:FWW.Framework.DapperEx.DataContext.db">
            <summary>
            数据库
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataContext.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionstringKey"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataContext.From``1(System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TableEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataContext.UpdateByPrimaryKey(System.Object,System.String)">
            <summary>
            更新全部字段  
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataContext.Update(System.Object,FWW.Framework.DapperEx.WhereClip,System.String)">
            <summary>
            根据条件更新实体中的字段
            </summary>
            <param name="entity"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataContext.Update``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DataContext.Procedure(System.String)">
            <summary>
            存储过程查询
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.IReload">
            <summary>
            重新加载接口
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.IReload.Reload">
            <summary>
            重新加载
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.IReload.LoadFromDataBase">
            <summary>
            从数据库加载
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SystemSetting">
            <summary>
            Class SystemSetting.
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.SystemSetting.LoadTasks">
            <summary>
            需要重新加载的实体
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SystemSetting.ReLaodSet">
            <summary>
            重新加载设置
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SystemSetting.LoadTaskFromDataBase">
            <summary>
            从数据库加载设置
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SystemTask">
            <summary>
            Class SystemTask.
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.SystemTask.Task">
            <summary>
            The task
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SystemTask.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:FWW.Framework.DapperEx.SystemTask.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="M:FWW.Framework.DapperEx.SystemTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FWW.Framework.DapperEx.SystemTask"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SystemTask.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.SystemTasks`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FWW.Framework.DapperEx.SystemTasks`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FWW.Framework.DapperEx.SystemTasks`1"/> class.
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SystemTasks`1.Add(System.String,`0,System.Int32)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="load">The load.</param>
            <param name="sort">The sort.</param>
        </member>
        <member name="T:FWW.Framework.DapperEx.MyConnectionStates">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.MyConnectionStates.NeedClose">
            <summary>
            需要关闭连接
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.MyConnectionStates.NoNeedClose">
            <summary>
            不需要关闭连接
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.MyConnectionStates.Closed">
            <summary>
            关闭状态
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.ExtendMethod.ToStringSeparatedByComma``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将IEnumerable的对象转化为以逗号隔开的字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.ExtendMethod.ToObjectList(System.Data.DataTable)">
            <summary>
            将DataTable转换为List{Object}
            </summary>
            <param name="tb">The tb.</param>
            <returns>IEnumerable{System.Object}.</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.PageTableResult">
            <summary>
            DataTable 直接转换的结果实体
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.EntityCacheManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.TryGetValue(System.Type,FWW.Framework.DapperEx.EntityCacheInfo@)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.CreateSqlFunc(System.Type,System.String,System.Int32)">
            <summary>
            Creates the SQL function.
            </summary>
            <param name="type">The type.</param>
            <param name="formatstring">The formatstring.</param>
            <param name="movelength">The movelength.</param>
            <param name="checkignore">是否检查忽略属性</param>
            <returns>Func{System.ObjectSystem.String}.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.CreateUpdateFunc(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.String,System.Int32)">
            <summary>
            创建一个将实体值装入字典的方法
            </summary>
            <param name="type"></param>
            <param name="propertys"></param>
            <param name="formatstring"></param>
            <param name="movelength"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.CreateInsertSqlFunc(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.String,System.String,System.Int32)">
            <summary>
            生成InsertSql
            </summary>
            <param name="type"></param>
            <param name="propertys"></param>
            <param name="formatstring"></param>
            <param name="formatstringValue"></param>
            <param name="movelength"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.CreateSqlDynamicFunc(System.Reflection.Emit.ILGenerator,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.String,System.Int32,System.Boolean)">
            <summary>
            有值的组成一条需要的Sql
            </summary>
            <param name="il">The il.</param>
            <param name="propertys">属性集合</param>
            <param name="formatstring">The formatstring.</param>
            <param name="movelength">The movelength.</param>
            <param name="checkignore">是否检查忽略属性</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.CreateInsertSqlDynamicFunc(System.Reflection.Emit.ILGenerator,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates the SQL dynamic function.
            </summary>
            <param name="il">The il.</param>
            <param name="propertys">属性集合</param>
            <param name="formatstring">The formatstring.</param>
            <param name="formatstringValue">The formatstring value.</param>
            <param name="movelength">The movelength.</param>
            <param name="checkignore">是否检查忽略属性</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.CreateUpdateSqlDynamicFunc(System.Reflection.Emit.ILGenerator,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.String,System.Int32,System.Boolean)">
            <summary>
            有值的组成Sql同时将值保存在SqlDataParamter
            </summary>
            <param name="il">The il.</param>
            <param name="propertys">属性集合</param>
            <param name="formatstring">The formatstring.</param>
            <param name="movelength">The movelength.</param>
            <param name="checkignore">是否检查忽略属性</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.RemoveStringBuilder(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Int32)">
            <summary>
            移除StringBuilder从0开始字符串
            </summary>
            <param name="il"></param>
            <param name="sb"></param>
            <param name="movelength"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.AppendFormatStringBuilder(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.String,System.String)">
            <summary>
            StringBuilder添加Format字段
            </summary>
            <param name="il"></param>
            <param name="sb"></param>
            <param name="formatstring"></param>
            <param name="name"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCacheManager.SqlDataParamterAdd(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode,System.Reflection.PropertyInfo)">
            <summary>
            SqlDataParamter添加值
            </summary>
            <param name="il"></param>
            <param name="model"></param>
            <param name="paramter"></param>
            <param name="property"></param>
        </member>
        <member name="T:FWW.Framework.DapperEx.EntityCache">
            <summary>
            Sql生成工具
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.WithNoLockStr(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreatePageSQL(System.Type,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="displayFields"></param>
            <param name="where"></param>
            <param name="pageNum"></param>
            <param name="pageCount"></param>
            <param name="sort"></param>
            <param name="withnolock"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreatePageSQL(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            创建分页SQL
            </summary>
            <param name="tableName">表名</param>
            <param name="displayFields">显示字段</param>
            <param name="where">where条件</param>
            <param name="pageNum">当前页码</param>
            <param name="pageCount">每页记录数</param>
            <param name="primaryKey">The primary key.</param>
            <param name="sort">排序字段</param>
            <param name="withnolock">if set to <c>true</c> [withnolock].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreatePageSQLByCustomSql(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Creates the page SQL by custom SQL.
            </summary>
            <param name="tableSql">表的Sql语句</param>
            <param name="displayFields">The display fields.</param>
            <param name="where">The where.</param>
            <param name="pageNum">The page number.</param>
            <param name="pageCount">The page count.</param>
            <param name="primaryKey">The primary key.</param>
            <param name="sort">The sort.</param>
            <param name="withnolock">if set to <c>true</c> [withnolock].</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">表Sql不能为空</exception>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateSelectSQL(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates the select SQL.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="displayFields">The display fields.</param>
            <param name="where">The where.</param>
            <param name="sort">The sort.</param>
            <param name="Count">The count.</param>
            <param name="updatecheck">if set to <c>true</c> [updatecheck].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateSelectSQL(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            创建Select语句
            </summary>
            <param name="tableName">表名</param>
            <param name="displayFields">显示字段</param>
            <param name="where">where</param>
            <param name="sort">排序</param>
            <param name="Count">最大记录数目</param>
            <param name="updatecheck">是否获取检查更新标识</param>
            <param name="withnolock">if set to <c>true</c> [withnolock].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateSelectSql(System.Type,System.String,FWW.Framework.DapperEx.WhereObjectList,FWW.Framework.DapperEx.SqlDataParameter@,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates the select SQL.
            </summary>
            <param name="modeltype">The modeltype.</param>
            <param name="displayfields">The displayfields.</param>
            <param name="where">The where.</param>
            <param name="paramter">The paramter.</param>
            <param name="sort">The sort.</param>
            <param name="count">The count.</param>
            <param name="withnolock">if set to <c>true</c> [withnolock].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateSelectByPrimaryKey(System.Object,System.String,System.Boolean)">
            <summary>
            根据主键
            </summary>
            <param name="model"></param>
            <param name="displayfields"></param>
            <param name="withnolock"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateSelectSimple(System.Object,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            简单查询生成器
            </summary>
            <param name="model"></param>
            <param name="displayfields"></param>
            <param name="withnolock"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateCountSQL(System.String,System.String,System.Boolean)">
            <summary>
            获取统计SQL
            </summary>
            <param name="tableName">表名</param>
            <param name="where">The where.</param>
            <param name="withnolock">if set to <c>true</c> [withnolock].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.GetTableName``1">
            <summary>
            获取表名
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateUpdateByPrimaryKey(System.Object,System.String)">
            <summary>
            Creates the update by primary key.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateUpdateByWhere(System.Object,System.String,System.String)">
            <summary>
            Creates the update by where.
            </summary>
            <param name="obj">The object.</param>
            <param name="where">The where.</param>
            <param name="extendup">扩展的更新字段</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateUpdateSQL(System.String,System.String,System.String)">
            <summary>
            创建更新SQL
            </summary>
            <param name="tableName"></param>
            <param name="UpSQL"></param>
            <param name="where"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateUpdateSQL(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            创建更新SQL，如果字典中含有主键值，此处需标记，会跳过此字段
            </summary>
            <param name="tableName">表名</param>
            <param name="updateFields">更新字段</param>
            <param name="where">条件</param>
            <param name="primarykey">如果字典中含有主键值，此处需标记，会跳过此字段</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.BuildUpdateFields(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Builds the update from entity.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="entity">The entity.</param>
            <param name="userName">Name of the user.</param>
            <param name="expFields">扩展字段</param>
            <param name="updatePrimaryKey">是否更新主键</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateInsertSQL(System.Object)">
            <summary>
            Creates the insert SQL.
            </summary>
            <param name="model">The model.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateInsertNoReturnAutoIDSQL(System.Object)">
            <summary>
            返回不返回主键的SQL
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateInsertSQL(System.String,System.String,System.String)">
            <summary>
            创建插入SQL语句
            </summary>
            <param name="tableName"></param>
            <param name="InSQL">插入的值</param>
            <param name="identityField">要返回的主键,不设置无返回值</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateInsertSQLWithNoReturn(System.String,System.String,System.String)">
            <summary>
            创建插入SQL语句,不返回自增主键
            </summary>
            <param name="tableName"></param>
            <param name="InSQL"></param>
            <param name="identityField"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateInsertSQL(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            创建插入SQL语句
            </summary>
            <param name="tableName"></param>
            <param name="insertvalues">插入的值</param>
            <param name="identityField">要返回的主键,不设置无返回值</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.BuildInsertFields(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            </summary>
            <param name="parameters"></param>
            <param name="entity"></param>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateDeleteSQL(System.String,System.String)">
            <summary>
            创建删除SQL
            </summary>
            <param name="tableName"></param>
            <param name="where"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.CreateDeleteByPrimaryKey(System.Object)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.BuildAndWhere(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.BuildWhereByWhereList(FWW.Framework.DapperEx.SqlDataParameter@,FWW.Framework.DapperEx.WhereObjectList)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="wherelist"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.EntityCache.BuildWhereByWhereObject(FWW.Framework.DapperEx.SqlDataParameter@,FWW.Framework.DapperEx.WhereObject)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},FWW.Framework.DapperEx.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,FWW.Framework.DapperEx.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="E:FWW.Framework.DapperEx.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.AddTypeHandler(System.Type,FWW.Framework.DapperEx.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.AddTypeHandlerImpl(System.Type,FWW.Framework.DapperEx.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.AddTypeHandler``1(FWW.Framework.DapperEx.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:FWW.Framework.DapperEx.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Identity.Equals(FWW.Framework.DapperEx.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType)">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Data.CommandType)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Execute(System.Data.IDbConnection,FWW.Framework.DapperEx.CommandDefinition)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteScalar(System.Data.IDbConnection,FWW.Framework.DapperEx.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,FWW.Framework.DapperEx.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteReader(System.Data.IDbConnection,FWW.Framework.DapperEx.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ExecuteReader(System.Data.IDbConnection,FWW.Framework.DapperEx.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query``1(System.Data.IDbConnection,FWW.Framework.DapperEx.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.QueryMultiple(System.Data.IDbConnection,FWW.Framework.DapperEx.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ReplaceLiterals(FWW.Framework.DapperEx.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.CreateParamInfoGenerator(FWW.Framework.DapperEx.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.SetTypeMap(System.Type,FWW.Framework.DapperEx.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Read``1">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.Insert(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="cnn"></param>
            <param name="model"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.InsertAutoIncrement(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            返回自增列
            </summary>
            <param name="cnn"></param>
            <param name="model"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.UpdateByPrimaryKey(System.Data.IDbConnection,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            根据主键作为条件更新实体
            </summary>
            <param name="cnn">The CNN.</param>
            <param name="model">实体</param>
            <param name="extendUpSql">扩展更新sql</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.UpdateByWhere(System.Data.IDbConnection,System.Object,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Updates the by where.
            </summary>
            <param name="cnn">The CNN.</param>
            <param name="model">The model.</param>
            <param name="where">The where.</param>
            <param name="extendUpSql">The extend up SQL.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.SqlMapper.TryGetEntityByPrimaryKey``1(System.Data.IDbConnection,``0@,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cnn"></param>
            <param name="model"></param>
            <param name="displayFields"></param>
            <param name="withnolock"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicParameters.AddParameters(System.Data.IDbCommand,FWW.Framework.DapperEx.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="P:FWW.Framework.DapperEx.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="T:FWW.Framework.DapperEx.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:FWW.Framework.DapperEx.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:FWW.Framework.DapperEx.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.WhereObject">
            <summary>
            条件类
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.WhereObject.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:FWW.Framework.DapperEx.WhereObject.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
            <value>
            The operation.
            </value>
        </member>
        <member name="P:FWW.Framework.DapperEx.WhereObject.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:FWW.Framework.DapperEx.WhereObject.FieldDbType">
            <summary>
            条件数据类型
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FWW.Framework.DapperEx.WhereObject"/> class.
            </summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObject.#ctor(System.String,FWW.Framework.DapperEx.WhereOperation,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FWW.Framework.DapperEx.WhereObject"/> class.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="operation">The operation.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObject.#ctor(System.String,FWW.Framework.DapperEx.WhereOperation,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            Initializes a new instance of the <see cref="T:FWW.Framework.DapperEx.WhereObject" /> class.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="operation">The operation.</param>
            <param name="value">The value.</param>
            <param name="dbType">Type of the database.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObject.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObject.GetOperationStr(FWW.Framework.DapperEx.WhereOperation)">
            <summary>
            获取操作符
            </summary>
            <param name="operation">操作符</param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.DapperEx.WhereObjectList">
            <summary>
            Where条件
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.WhereObjectList.ORListObject">
            <summary>
            OR条件
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.WhereObjectList.AndList">
            <summary>
            AndWhereList
            </summary>
        </member>
        <member name="P:FWW.Framework.DapperEx.WhereObjectList.ORList">
            <summary>
            OrWhereList
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.#ctor(System.String,FWW.Framework.DapperEx.WhereOperation,System.Object)">
            <summary>
            默认添加And条件的实例
            </summary>
            <param name="fieldname">The fieldname.</param>
            <param name="operation">The operation.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.Add(System.String,FWW.Framework.DapperEx.WhereOperation,System.Object)">
            <summary>
            添加And条件
            </summary>
            <param name="fieldname">字段名</param>
            <param name="operation">条件</param>
            <param name="value">值</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.Add(System.String,FWW.Framework.DapperEx.WhereOperation,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            添加And条件
            </summary>
            <param name="fieldname">字段名</param>
            <param name="operation">条件</param>
            <param name="value">值</param>
            <param name="dbType">参数数据类型</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.AddFieldToField(System.String,FWW.Framework.DapperEx.WhereOperation,System.String)">
            <summary>
            添加字段和字段关系条件
            </summary>
            <param name="fieldname1">字段1</param>
            <param name="operation">条件</param>
            <param name="fieldname2">字段2</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.AddORFieldToField(System.String,FWW.Framework.DapperEx.WhereOperation,System.String)">
            <summary>
            添加或者字段和字段关系条件
            </summary>
            <param name="fieldname1">字段1</param>
            <param name="operation">条件</param>
            <param name="fieldname2">字段2</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.AddCustom(System.String)">
            <summary>
            添加自定义条件
            </summary>
            <param name="where">where</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.AddORCustom(System.String)">
            <summary>
            添加自定义条件
            </summary>
            <param name="where">where</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.#ctor(FWW.Framework.DapperEx.WhereObject)">
            <summary>
            默认添加And条件
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.Add(FWW.Framework.DapperEx.WhereObjectList)">
            <summary>
            添加And条件，被添加的条件会用括号包裹
            </summary>
            <param name="wherelist"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.AddOR(System.String,FWW.Framework.DapperEx.WhereOperation,System.Object)">
            <summary>
            添加或者条件
            </summary>
            <param name="fieldname">字段名</param>
            <param name="operation">条件</param>
            <param name="value">值</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.AddOR(System.String,FWW.Framework.DapperEx.WhereOperation,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            添加或者条件
            </summary>
            <param name="fieldname">字段名</param>
            <param name="operation">条件</param>
            <param name="value">值</param>
            <param name="dbType">参数数据类型</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.AddOR(FWW.Framework.DapperEx.WhereObjectList)">
            <summary>
            添加或者条件，被添加的条件会用括号包裹
            </summary>
            <param name="wherelist">WhereObjectList</param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.AddOR(FWW.Framework.DapperEx.WhereObject)">
            <summary>
            
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.AllCount">
            <summary>
            所有条件的总数
            </summary>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.Clone">
            <summary>
            深度复制
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:FWW.Framework.DapperEx.WhereObjectList.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
        </member>
        <member name="T:FWW.Framework.DapperEx.WhereOperation">
            <summary>
            where条件
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.IsNull">
            <summary>
            为Null
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.InClude">
            <summary>
            包括
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.NotInClude">
            <summary>
            不包括
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.Like">
            <summary>
            相似
            </summary>
        </member>
        <member name="F:FWW.Framework.DapperEx.WhereOperation.Self">
            <summary>
            自定义条件
            </summary>
        </member>
    </members>
</doc>
