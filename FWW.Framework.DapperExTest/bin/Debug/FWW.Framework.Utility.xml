<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FWW.Framework.Utility</name>
    </assembly>
    <members>
        <member name="M:FWW.Framework.Utility.CryptoUtil.Decrypting(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="Source"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.CryptoUtil.Encrypting(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="Source"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.Utility.EnumHelper">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.EnumHelper.GetEnumItemDescription``1(System.Int32)">
            <summary>
            由枚举值获取说明
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="itemValue">枚举值</param>
            <returns>说明</returns>
        </member>
        <member name="M:FWW.Framework.Utility.EnumHelper.GetEnumItems(System.Type)">
            <summary>
            获取枚举条目信息列表
            </summary>
            <param name="enumType">枚举类型</param>
            <returns>条目列表</returns>
        </member>
        <member name="M:FWW.Framework.Utility.EnumHelper.ParseByDescription``1(System.String)">
            <summary>
            由说明来解析枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="description">说明</param>
            <returns>枚举</returns>
        </member>
        <member name="M:FWW.Framework.Utility.EnumHelper.ParseByNameOrValue``1(System.String)">
            <summary>
            从名称或枚举值的字符串表示解析枚举值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="nameOrValue">名称或值字符串表示</param>
            <returns>枚举</returns>
        </member>
        <member name="M:FWW.Framework.Utility.EnumHelper.ParseByNameOrValue``1(System.String,System.Boolean)">
            <summary>
            从名称或枚举值的字符串表示解析枚举值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="nameOrValue">名称或值字符串表示</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>枚举</returns>
        </member>
        <member name="T:FWW.Framework.Utility.EnumItem">
            <summary>
            枚举条目信息
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.EnumItem.#ctor(System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="P:FWW.Framework.Utility.EnumItem.Value">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:FWW.Framework.Utility.EnumItem.Description">
            <summary>
            枚举说明
            </summary>
        </member>
        <member name="P:FWW.Framework.Utility.EnumItem.Name">
            <summary>
            枚举名
            </summary>
        </member>
        <member name="T:FWW.Framework.Utility.Extends.ArrayExts">
            <summary>
            数组扩展类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.ArrayExts.ToArrayString``1(``0[],System.Char,System.String,System.String)">
            <summary>
            将int类型数组转化成数组字符串，用分隔号分割
            </summary>
            <param name="arr"></param>
            <param name="split">分隔号</param>
            <param name="appendToElement_left">向数组中每个元素的左边附加的字符串</param>
            <param name="appendToElement_right">向数组中每个元素的右边附加的字符串</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.ArrayExts.DuplicateElement(System.String[],System.String[])">
            <summary>
            从两个数组中找出重复的元素，如果没有重复的元素，则返回一个长度为0的数组
            </summary>
            <param name="srcArr">原数组</param>
            <param name="arr">要比对的数组</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.ArrayExts.Contains(System.String[],System.String,System.Boolean)">
            <summary>
            比较一个数组中是否包含某个字符串
            </summary>
            <param name="srcArr"></param>
            <param name="str">要比较的字符串</param>
            <param name="ignorCase">忽略大小写进行比较：true-忽略大小写，false-不忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.ArrayExts.RemoveDuplicateElement``1(``0[],FWW.Framework.Utility.Extends.IsEqual{``0})">
            <summary>
            移除同一数组内的重复元素
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="arr">数组</param>
            <param name="fun_isEqual">函数：比对两个元素是否相同，如果为null，则默认采用object.Equals()的方法来进行比对</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.ArrayExts.CombindElements``1(``0[],``0[],FWW.Framework.Utility.Extends.IsEqual{``0})">
            <summary>
            合并两个数组中的元素，并过滤掉重复的元素
            </summary>
            <typeparam name="T">数组元素类型</typeparam>
            <param name="srcArr">原数组</param>
            <param name="arr">要合并的数组</param>
            <param name="fun_isEqual">函数：用以比对两个对象是否相同</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.ArrayExts.Append``1(``0[],``0[])">
            <summary>
            项当前数组后面附加新的数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="srcArr"></param>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.ArrayExts.Prepend``1(``0[],``0[])">
            <summary>
            向当前数组前面追加一段新的数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="srcArr"></param>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.Utility.Extends.IsEqual`1">
            <summary>
            比较两个对象是否相同，相同返回True
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="t1">对象1</param>
            <param name="t2">对象2</param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.Utility.Extends.DateTimeExt">
            <summary>
            DateTime扩展类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.DateTimeExt.ConvertFromTimeZone(System.DateTime,System.String)">
            <summary>
            将系统当前时间转换为目标时区的时间
            </summary>
            <param name="dtLocal">系统当前时间</param>
            <param name="timeZoneID">目标时区</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.DateTimeExt.GetDateSkipWeekend_Beofre(System.DateTime)">
            <summary>
            如遇周末日期，跳过周末获取周五的日期
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.DateTimeExt.GetDateSkipWeekend_After(System.DateTime)">
            <summary>
            如遇周末日期，跳过周末获取下周一的日期
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.DateTimeExt.MonthDiff(System.DateTime,System.DateTime)">
            <summary>
            获取两个日期相差的月份属
            </summary>
            <param name="startDate">起始日期</param>
            <param name="endDate">截至日期</param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.Utility.Extends.EnumExts">
            <summary>
            扩展的Enum类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.EnumExts.Convert``1(System.Enum)">
            <summary>
            将当前Enum转化为另一种类型的Enum（要求两种不同的Enum其Name名称是相同的）；
            如果转换失败，则返回目标Enum中的默认元素
            </summary>
            <typeparam name="T">另一种Enum类型</typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.EnumExts.GetEnumByValue``1(System.Int32)">
            <summary>
            根据int值，获取对应该值的Enum元素；
            如果没有对应的值，则返回目标Enum类型中的默认元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">Enum元素的值</param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.EnumExts.GetEnumByName``1(System.String,System.Boolean)">
            <summary>
            依据Enum的Name，获取Enum对象
            </summary>
            <typeparam name="T">Enum类型</typeparam>
            <param name="name">Enum名称</param>
            <param name="ignoreCase">是否忽略大小写，默认False</param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.Utility.Extends.StringExts">
            <summary>
            扩展的String类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.StringExts.IsEmptyAfterTrim(System.String,System.Char)">
            <summary>
            判断将字符串经过Trim后，是否为空字符串或Null
            </summary>
            <param name="str">要判断的字符串</param>
            <param name="trimChar">要截取的字符，默认为空格</param>
            <returns>如果为Null、空字符串或空格，则返回True，否则返回False</returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.StringExts.ToTimeSpan(System.String)">
            <summary>
            将String类型的时间格式的字符串转为TimeSpan对象
            </summary>
            <param name="str">String类型的时间格式的字符串</param>
            <returns>转换后的TimeSpan对象</returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.StringExts.ToMD5(System.String)">
            <summary>
            MD5加密字符串
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.Extends.StringExts.IsNumeric(System.String)">
            <summary>
            判断该字符串是不是一个数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.FileHelper.ReadFileStringBuilder(System.String,System.Text.Encoding)">
            <summary>
            读取文本类容
            </summary>
            <param name="filename"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.FileHelper.ReadFileStringBuilder(System.String)">
            <summary>
            读取文本类容
            </summary>
            <param name="filename">The filename.</param>
            <returns>StringBuilder.</returns>
        </member>
        <member name="M:FWW.Framework.Utility.FileHelper.GetEncoding(System.String)">
            <summary>   
            取得一个文本文件的编码方式。如果无法在文件头部找到有效的前导符，Encoding.Default将被返回。   
            </summary>   
            <param name="fileName">文件名。</param>   
            <returns></returns>   
        </member>
        <member name="M:FWW.Framework.Utility.FileHelper.GetEncoding(System.IO.FileStream)">
            <summary>   
            取得一个文本文件流的编码方式。   
            </summary>   
            <param name="stream">文本文件流。</param>   
            <returns></returns>   
        </member>
        <member name="M:FWW.Framework.Utility.FileHelper.GetEncoding(System.String,System.Text.Encoding)">
            <summary>   
            取得一个文本文件的编码方式。   
            </summary>   
            <param name="fileName">文件名。</param>   
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>   
            <returns></returns>   
        </member>
        <member name="M:FWW.Framework.Utility.FileHelper.GetEncoding(System.IO.FileStream,System.Text.Encoding)">
            <summary>   
            取得一个文本文件流的编码方式。   
            </summary>   
            <param name="stream">文本文件流。</param>   
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>   
            <returns></returns>   
        </member>
        <member name="M:FWW.Framework.Utility.FileHelper.GetEncoding(System.IO.Stream)">
            <summary>   
            通过给定的文件流，判断文件的编码类型   
            </summary>   
            <param name="fs">文件流</param>   
            <returns>文件的编码类型</returns>   
        </member>
        <member name="M:FWW.Framework.Utility.FileHelper.IsUTF8Bytes(System.Byte[])">
            <summary>   
            判断是否是不带 BOM 的 UTF8 格式   
            </summary>   
            <param name="data"></param>   
            <returns></returns>   
        </member>
        <member name="T:FWW.Framework.Utility.IO.File">
            <summary>
            文件操作类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.IO.File.IsOpen(System.String)">
            <summary>
            判断文件是否被打开，已被打开：True，未被打开：False
            </summary>
            <param name="filename">文件路径</param>
            <returns></returns>
        </member>
        <member name="T:FWW.Framework.Utility.IO.FileReader">
            <summary>
            文件读取类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.IO.FileReader.ReadAll(System.String,System.Text.Encoding)">
            <summary>
            读取文件中所有的内容
            </summary>
            <param name="filePath">文件路径</param>
            <param name="encoding">编码</param>
            <returns>文件内容</returns>
        </member>
        <member name="T:FWW.Framework.Utility.IO.FileWatcher">
            <summary>
            文件监控类
            </summary>
        </member>
        <member name="E:FWW.Framework.Utility.IO.FileWatcher.FileChanged">
            <summary>
            文件被修改通知事件
            </summary>
        </member>
        <member name="E:FWW.Framework.Utility.IO.FileWatcher.FileCreated">
            <summary>
            文件被创建通知事件
            </summary>
        </member>
        <member name="E:FWW.Framework.Utility.IO.FileWatcher.FileDeleted">
            <summary>
            文件被删除通知事件
            </summary>
        </member>
        <member name="E:FWW.Framework.Utility.IO.FileWatcher.FileRenamed">
            <summary>
            文件重命名通知事件
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.IO.FileWatcher.#ctor(System.String,System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="folder">监控目录</param>
            <param name="filter">要监控的文件，如"*.xml"</param>
            <param name="tryCount">FileChanged事件触发时可能会引发Exception，该参数指定当引发Exception时进行重试的次数</param>
        </member>
        <member name="M:FWW.Framework.Utility.IO.FileWatcher.Start">
            <summary>
            开启文件监控
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.IO.FileWatcher.Stop">
            <summary>
            停止文件监控
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.IO.FileWatcher.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:FWW.Framework.Utility.IO.PathHelper">
            <summary>
            路径处理类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.IO.PathHelper.GetRunPath">
            <summary>
            获取程序运行的根目录
            </summary>
            <returns>程序运行根目录（标准路径，以"\"结尾）</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.PathHelper.GetStandardPath(System.String)">
            <summary>
            获取标准的目录路径：以"\"结尾
            </summary>
            <param name="path">路径</param>
            <returns>标准目录，以"\"结尾</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.PathHelper.GetFolderByFullPath(System.String)">
            <summary>
            根据文件的完整路径，获取该文件所在的目录
            </summary>
            <param name="fileFullPath">文件完整路径，如C:\Windows\a.txt</param>
            <returns>文件所在的目录路径（标准路径，以"\"结尾），如C:\Windows\</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.PathHelper.GetFileNameByFullPath(System.String)">
            <summary>
            根据文件的完整路径，获取该文件名（不包含路径）
            </summary>
            <param name="fileFullPath">文件完整路径</param>
            <returns>文件名（不包含路径）</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.PathHelper.GetFileExtName(System.String)">
            <summary>
            获取文件扩展名
            </summary>
            <param name="filePath">文件名（可包含路径）</param>
            <returns>文件扩展名，不包含"."符号，如"txt"</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.PathHelper.IsAbsPath(System.String)">
            <summary>
            判断一个路径是否是绝对路径
            </summary>
            <param name="path">路径</param>
            <returns>绝对路径返回True</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.PathHelper.GetAbsPath(System.String)">
            <summary>
            获取绝对路径
            </summary>
            <param name="path">相对路径（如果是绝对路径则原样返回）</param>
            <returns>绝对路径</returns>
        </member>
        <member name="T:FWW.Framework.Utility.IO.XmlSerializer">
            <summary>
            XML序列化和反序列化类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.SerializeToFile``1(System.Object,System.String,System.IO.FileMode,System.Int32)">
            <summary>
            XML序列化
            </summary>
            <typeparam name="T">要序列化对象的类型</typeparam>
            <param name="obj">要序列化的对象</param>
            <param name="filePath">序列化后产生的文件路径</param>
            <param name="fileMode">文件模式，默认为打开或新建</param>
            <param name="tryCount">文件写入失败时，重试的次数，默认10次</param>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.SerializeToString``1(System.Object)">
            <summary>
            XML序列化
            </summary>
            <typeparam name="T">要序列化对象的类型</typeparam>
            <param name="obj">要序列化的对象</param>
            <returns>序列化后的XML文本字符串</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.Serialize``1(System.Object)">
            <summary>
            XML序列化
            </summary>
            <typeparam name="T">要序列化对象的类型</typeparam>
            <param name="obj">要序列化的对象</param>
            <returns>MemoryStream</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.Serialize(System.Type,System.Object)">
            <summary>
            XML序列化
            </summary>
            <param name="type">要序列化对象的类型</param>
            <param name="obj">要序列化的对象</param>
            <returns>MemoryStream</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.DeSerializeFromFile``1(System.String,System.Int32)">
            <summary>
            反序列化xml
            </summary>
            <param name="type">反序列化的目标类型</param>
            <param name="filePath">xml文件路径（绝对路径）</param>
            <param name="tryCount">文件读取失败时，重试的次数，默认10次</param>
            <exception cref="T:System.Exception">异常信息</exception>
            <returns>反序列化的对象</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.DeSerializeFromFile(System.Type,System.String,System.Int32)">
            <summary>
            反序列化xml
            </summary>
            <param name="type">反序列化的目标类型</param>
            <param name="filePath">xml文件路径（绝对路径）</param>
            <param name="tryCount">文件读取失败时，重试的次数，默认10次</param>
            <exception cref="T:System.Exception">若innerException参数为True，则会抛出异常</exception>
            <returns>反序列化的对象，若innerException为False且发生异常，则返回Null</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.DeSerialize``1(System.String)">
            <summary>
            反序列化xml
            </summary>
            <param name="type">反序列化的目标类型</param>
            <param name="xml">xml字符串</param>
            <exception cref="T:System.Exception">异常信息</exception>
            <returns>反序列化的对象</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.DeSerialize(System.Type,System.String)">
            <summary>
            反序列化xml
            </summary>
            <param name="type">反序列化的目标类型</param>
            <param name="xml">xml字符串</param>
            <exception cref="T:System.Exception">异常</exception>
            <returns>反序列化的对象，若innerException为False且发生异常，则返回Null</returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.DeSerialize``1(System.IO.Stream,System.Boolean)">
            <summary>
            反序列化xml
            </summary>
            <typeparam name="T">反序列化对象的类型</typeparam>
            <param name="stream">System.IO.Stream</param>
            <param name="autoDisposeStream">该方法执行完毕后是否自动关闭并释放Stream</param>
            <exception cref="T:System.Exception">异常</exception>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.IO.XmlSerializer.DeSerialize(System.IO.Stream,System.Type,System.Boolean)">
            <summary>
            反序列化xml
            </summary>
            <param name="stream">System.IO.Stream</param>
            <param name="type">反序列化的目标类型</param>
            <param name="autoDisposeStream">是否在方法内部自动关闭并释放Stream</param>
            <exception cref="T:System.Exception">反序列化出错时，抛出异常</exception>
            <returns>Object</returns>
        </member>
        <member name="T:FWW.Framework.Utility.MSQueueHelper">
            <summary>
            消息队列帮助器
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.MSQueueHelper.EnsureQueue``1(System.String,System.Boolean)">
            <summary>
            确保队列存在
            </summary>
            <typeparam name="QueueDataType">队列中消息体数据类型</typeparam>
            <param name="queueName">队列名称</param>
            <param name="transactional">是否支持事务</param>
            <returns>队列</returns>
        </member>
        <member name="T:FWW.Framework.Utility.PathHelper">
            <summary>
            路径帮助器
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.PathHelper.GetFullPath(System.String[])">
            <summary>
            获取路径物理全路径
            </summary>
            <param name="filePaths">文件路径数组</param>
            <returns>全路径</returns>
        </member>
        <member name="T:FWW.Framework.Utility.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FWW.Framework.Utility.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FWW.Framework.Utility.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FWW.Framework.Utility.Properties.Resources.ExceptionEnumDescriptionIsInvalid">
            <summary>
              Looks up a localized string similar to 枚举描述’{0}‘无效，无法转换成枚举类型&apos;{1}&apos;！.
            </summary>
        </member>
        <member name="P:FWW.Framework.Utility.Properties.Resources.ExceptionEnumTypeInvalid">
            <summary>
              Looks up a localized string similar to 类型&apos;{0}&apos;不是枚举类型！.
            </summary>
        </member>
        <member name="P:FWW.Framework.Utility.Properties.Resources.InformationXmlValidationResult">
            <summary>
              Looks up a localized string similar to {0}:{1}无效-- {2}！.
            </summary>
        </member>
        <member name="P:FWW.Framework.Utility.Properties.Resources.InformationXmValidationSucceed">
            <summary>
              Looks up a localized string similar to XML文档验证成功！.
            </summary>
        </member>
        <member name="T:FWW.Framework.Utility.SerializableDictionary`2">
            <summary>
            可XML序列化的字典
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.#ctor">
            <summary>
            缺省构造器
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            构造器
            </summary>
            <param name="dictionary">另一字典</param>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            构造器
            </summary>
            <param name="comparer">键比较器</param>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="capacity">初始容量</param>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            构造器
            </summary>
            <param name="dictionary">另一字典</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            构造器
            </summary>
            <param name="capacity">容量</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化构造器
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.GetSchema">
            <summary>
            验证文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:FWW.Framework.Utility.SerializableDictionary`2.SaveToFriendXml(System.String)">
            <summary>
            转换为较友好的,但不可反序列化的xml
            </summary>
            <returns>xml字符串</returns>
        </member>
        <member name="T:FWW.Framework.Utility.SerializationHelper">
            <summary>
            对象序列化帮助类.
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.SerializationHelper.Serialize(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="obj">对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:FWW.Framework.Utility.SerializationHelper.Deserialize``1(System.Byte[])">
            <summary>
            反序列化为类型为T的对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="bytes">字节数组</param>
            <returns>对象</returns>
        </member>
        <member name="M:FWW.Framework.Utility.SerializationHelper.Deserialize(System.Byte[])">
            <summary>
            反序列化对象
            </summary>
            <param name="bytes">字节数组</param>
            <returns>对象</returns>
        </member>
        <member name="M:FWW.Framework.Utility.SerializationHelper.SerializeJson(System.Object)">
            <summary>
            返回Json字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:FWW.Framework.Utility.SqlHelper">
            <summary>
            Sql语句拼接帮助类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.SqlHelper.GetSafeSqlParameterString(System.String)">
            <summary>
            得到拼接Sql用的安全参数字符串
            </summary>
            <param name="rawParameterString">原字符串</param>
            <returns>安全字符串</returns>
        </member>
        <member name="T:FWW.Framework.Utility.TemplateHelper">
            <summary>
            模板帮助类
            </summary>
        </member>
        <member name="T:FWW.Framework.Utility.TemplateHelper.LookUpFieldValueByObjectPropertyHelper">
            <summary>
            基于对象属性的域查找帮助类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.TemplateHelper.LookUpFieldValueByObjectPropertyHelper.GetObjectPropertyValue(System.Object,System.String)">
            <summary>
            通过反射获取对象指定属性或字段值的字符串表示
            </summary>
            <param name="obj">对象实例</param>
            <param name="propertyName">属性或字段名称</param>
            <returns>属性或字段值的字符串表示</returns>
        </member>
        <member name="T:FWW.Framework.Utility.TemplateHelper.LookUpFieldValueHelper">
            <summary>
            域查找帮助类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.TemplateHelper.LookUpFieldValueHelper.#ctor(FWW.Framework.Utility.TemplateHelper.LookUpFieldValueHandler)">
            <summary>
            构造函数
            </summary>
            <param name="lookUpFieldValueHandler">由域名称查找域值的委托</param>
        </member>
        <member name="M:FWW.Framework.Utility.TemplateHelper.LookUpFieldValueHelper.LookUpFieldValue(System.Text.RegularExpressions.Match)">
            <summary>
            由域匹配查找要域值
            </summary>
            <param name="match">匹配</param>
            <returns>域值</returns>
        </member>
        <member name="T:FWW.Framework.Utility.TemplateHelper.LookUpFieldValueHandler">
            <summary>
            域替换函数委托
            </summary>
            <param name="fieldName">域名称</param>
            <returns>域值</returns>
        </member>
        <member name="F:FWW.Framework.Utility.TemplateHelper.FieldTagRegex">
            <summary>
            模板文件中域标记正则表达式
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.TemplateHelper.ReplaceFieldTags(System.String,FWW.Framework.Utility.TemplateHelper.LookUpFieldValueHandler,System.Object[])">
            <summary>
            替换传入字符串的域标记
            </summary>
            <param name="templateString">传入的模板原字符串</param>
            <param name="searchFieldValue">域替换函数</param>
            <param name="parameters">替换参数</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:FWW.Framework.Utility.TemplateHelper.ReplaceFieldTags(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object[])">
            <summary>
            替换传入字符串的域标记
            </summary>
            <param name="templateString">传入的模板原字符串</param>
            <param name="objects">域数组</param>
            <param name="parameters">替换参数</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="T:FWW.Framework.Utility.XmlFileSerializationHelper">
            <summary>
            Xml文件序列化帮助类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.XmlFileSerializationHelper.SaveToXmlFile(System.String,System.Object,System.Text.Encoding)">
            <summary>
            将对象序列化到文件
            </summary>
            <param name="xmlFile">文件路径</param>
            <param name="obj">对象</param>
            <param name="encoding">序列化编码</param>
        </member>
        <member name="M:FWW.Framework.Utility.XmlFileSerializationHelper.SaveToXmlFile``1(System.String,``0,System.Text.Encoding)">
            <summary>
            将对象序列化到文件
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="xmlFile">文件路径</param>
            <param name="obj">对象</param>
            <param name="encoding">序列化编码</param>
        </member>
        <member name="M:FWW.Framework.Utility.XmlFileSerializationHelper.LoadFromXmlFile``1(System.String)">
            <summary>
            将对象从指定文件中反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="xmlFile">文件路径</param>
            <returns>对象</returns>
        </member>
        <member name="M:FWW.Framework.Utility.XmlFileSerializationHelper.LoadFromXmlFile(System.String,System.Type)">
            <summary>
            将对象从指定文件中反序列化
            </summary>
            <param name="xmlFile">文件路径</param>
            <param name="type">对象类型</param>
            <returns>对象</returns>
        </member>
        <member name="T:FWW.Framework.Utility.XmlSchemaLoader">
            <summary>
            xml架构加载器
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.XmlSchemaLoader.validationEventHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            验证异常处理
            </summary>
            <param name="sender">引发异常的元素</param>
            <param name="e">验证异常</param>
        </member>
        <member name="M:FWW.Framework.Utility.XmlSchemaLoader.Load(System.Xml.Schema.XmlSchemaSet,System.String,System.String@)">
            <summary>
            加载架构
            </summary>
            <param name="schemas">加载后的架构将加入此架构集</param>
            <param name="schema">架构</param>
            <param name="reason">失败原因</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:FWW.Framework.Utility.XmlSchemaLoader.LoadFile(System.Xml.Schema.XmlSchemaSet,System.String,System.String@)">
            <summary>
            加载架构
            </summary>
            <param name="schemas">加载后的架构将加入此架构集</param>
            <param name="schemaUri">架构文件地址</param>
            <param name="reason">失败原因</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:FWW.Framework.Utility.XmlSchemaLoader.Load(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlReader,System.String@)">
            <summary>
            加载架构
            </summary>
            <param name="schemas">最终将加载的架构加入到这个架构集</param>
            <param name="schema">架构</param>
            <param name="reason">原因</param>
            <returns>是否成功加载</returns>
        </member>
        <member name="T:FWW.Framework.Utility.XmlStringSerializationHelper">
            <summary>
            Xml字符串序列化帮助类
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.XmlStringSerializationHelper.SaveToXmlString(System.Object)">
            <summary>
            将对象序列化为XML字符串
            </summary>
            <param name="obj">对象</param>
            <returns>序列化后的对象</returns>
        </member>
        <member name="M:FWW.Framework.Utility.XmlStringSerializationHelper.SaveToXmlString``1(``0)">
            <summary>
            将对象序列化为
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <returns>序列化后的对象</returns>
        </member>
        <member name="M:FWW.Framework.Utility.XmlStringSerializationHelper.LoadFromXmlString``1(System.String)">
            <summary>
            从xml字符串加载对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="xmlString">xml字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:FWW.Framework.Utility.XmlStringSerializationHelper.LoadFromXmlString(System.String,System.Type)">
            <summary>
            将对象从指定文件中反序列化
            </summary>
            <param name="xmlFile">文件路径</param>
            <param name="type">对象类型</param>
            <returns>对象</returns>
        </member>
        <member name="T:FWW.Framework.Utility.XmlValidator">
            <summary>
            基于Schema的Xml文档验证器
            </summary>
        </member>
        <member name="M:FWW.Framework.Utility.XmlValidator.validationEventHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            验证异常处理
            </summary>
            <param name="sender">引发异常的元素</param>
            <param name="e">验证异常</param>
        </member>
        <member name="M:FWW.Framework.Utility.XmlValidator.ValidateFile(System.String,System.Xml.Schema.XmlSchemaSet,System.String@)">
            <summary>
            验证xml文档
            </summary>
            <param name="inputUri">xml文档路径</param>
            <param name="schemas">架构集</param>
            <param name="reason">失败原因</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:FWW.Framework.Utility.XmlValidator.Validate(System.String,System.Xml.Schema.XmlSchemaSet,System.String@)">
            <summary>
            验证xml文档
            </summary>
            <param name="xmlDocument">xml文档</param>
            <param name="schemas">架构集</param>
            <param name="reason">失败原因</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:FWW.Framework.Utility.XmlValidator.Validate(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet,System.String@)">
            <summary>
            从文本流中验证xml文档有效性
            </summary>
            <param name="reader">文本流</param>
            <param name="schemas">xml架构</param>
            <param name="reason">原因</param>
            <returns>xml是否有效</returns>
        </member>
    </members>
</doc>
